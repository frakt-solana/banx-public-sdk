{
  "version": "0.1.0",
  "name": "bonds",
  "instructions": [
    {
      "name": "vote",
      "accounts": [
        {
          "name": "vote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "proposal",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "proposalVariant",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "previousProposalVariant",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "adventure",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "adventureSubscription",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "saveVariant",
      "accounts": [
        {
          "name": "proposalVariant",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "proposal",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "params",
          "type": {
            "defined": "SaveVariantParams"
          }
        }
      ]
    },
    {
      "name": "saveProposal",
      "accounts": [
        {
          "name": "proposal",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "params",
          "type": {
            "defined": "SaveProposalParams"
          }
        }
      ]
    },
    {
      "name": "migrateBondTradeTransaction",
      "accounts": [
        {
          "name": "fraktBond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondTradeTransactionV3",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOffer",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondTransactionUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "fbondTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "seller",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "originalLent",
          "type": "u64"
        },
        {
          "name": "fullRepaidAmount",
          "type": "u64"
        },
        {
          "name": "partialRepaySnapshot",
          "type": "u64"
        },
        {
          "name": "bondTradeTransactionState",
          "type": {
            "defined": "BondTradeTransactionV2State"
          }
        },
        {
          "name": "amountOfBonds",
          "type": "u64"
        },
        {
          "name": "solAmount",
          "type": "u64"
        },
        {
          "name": "feeAmount",
          "type": "u64"
        },
        {
          "name": "bondTradeTransactionType",
          "type": {
            "defined": "BondTradeTransactionV2Type"
          }
        },
        {
          "name": "soldAt",
          "type": "u64"
        },
        {
          "name": "redeemedAt",
          "type": "u64"
        },
        {
          "name": "redeemResult",
          "type": {
            "defined": "RedeemResult"
          }
        },
        {
          "name": "isDirectSell",
          "type": "bool"
        }
      ]
    },
    {
      "name": "boundHadoMarketToFraktMarket",
      "accounts": [
        {
          "name": "hadoMarket",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "fraktMarket",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "hadoRegistry",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "initializeHadoMarket",
      "accounts": [
        {
          "name": "hadoMarket",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "validationAdapterProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "CHECK Custom validation adapter"
          ]
        },
        {
          "name": "pairTokenMint",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "CHECK Custom token mint"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "marketParams",
          "type": {
            "defined": "InitializeHadoMarketParams"
          }
        }
      ]
    },
    {
      "name": "finishHadoMarket",
      "accounts": [
        {
          "name": "hadoMarket",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "updateHadoMarketFee",
      "accounts": [
        {
          "name": "hadoMarket",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "newFee",
          "type": "u64"
        }
      ]
    },
    {
      "name": "initializeFlashLoanPool",
      "accounts": [
        {
          "name": "pool",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "loanFeePoints",
          "type": "u16"
        }
      ]
    },
    {
      "name": "depositSolToFlashLoanPool",
      "accounts": [
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "fundsSolVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "solAmountToDeposit",
          "type": "u64"
        }
      ]
    },
    {
      "name": "withdrawSolFromFlashLoanPool",
      "accounts": [
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "fundsSolVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "solAmountToWithdraw",
          "type": "u64"
        }
      ]
    },
    {
      "name": "takeFlashLoan",
      "accounts": [
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "fundsSolVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "CHECK : instructions"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "solAmountToBorrow",
          "type": "u64"
        }
      ]
    },
    {
      "name": "repayFlashLoan",
      "accounts": [
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "fundsSolVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "CHECK : instructions"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "solAmountToRepay",
          "type": "u64"
        }
      ]
    },
    {
      "name": "borrowPerpetualTest",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "protocolFeeReceiver",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiverSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "perpetualBorrowParams",
          "type": {
            "vec": {
              "defined": "BorrowPerpetualParams"
            }
          }
        },
        {
          "name": "optimizeIntoReserves",
          "type": "bool"
        },
        {
          "name": "aprRate",
          "type": "u64"
        }
      ]
    },
    {
      "name": "mapBanxToPoints",
      "accounts": [
        {
          "name": "banxPointsMap",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "playerPoints",
          "type": "u64"
        },
        {
          "name": "partnerPoints",
          "type": "u64"
        }
      ]
    },
    {
      "name": "fixBrokenBanxStake",
      "accounts": [
        {
          "name": "banxStake",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "removePerpetualOffer",
      "accounts": [
        {
          "name": "bondOfferV2",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "bondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "vaultSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "repayPerpetualLoan",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "metadataProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "authorizationRulesProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiverSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "repayPerpetualLoanSpl",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "lender",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "fraktBond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOffer",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "mutualBondVaultSplInTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userSplInTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOfferVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOfferVaultSplOutTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splInTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiver",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "splOutTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiverSplOutTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userSplOutTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "lenderSplOutTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "repayPerpetualLoanTest",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiverSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "refinancePerpetualLoan",
      "accounts": [
        {
          "name": "fbond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOfferV2",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "uninitializedOldBondOfferV2",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK old_bond_offer_v2"
          ]
        },
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "oldBondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "lender",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "hadoMarket",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "protocolFeeReceiver",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "sponsorVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK sponsor vault"
          ]
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "oldBondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "oldVaultSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiverSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "lenderSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "bondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        }
      ],
      "args": [
        {
          "name": "bondOfferRandomSeed",
          "type": "u64"
        },
        {
          "name": "newApr",
          "type": "u64"
        }
      ]
    },
    {
      "name": "makePerpetualMarket",
      "accounts": [
        {
          "name": "hadoMarket",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "fraktMarket",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "hadoRegistry",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "whitelistEntry",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "marketParams",
          "type": {
            "defined": "MakePerpetualMarketParams"
          }
        }
      ]
    },
    {
      "name": "makePerpetualMarketValidation",
      "accounts": [
        {
          "name": "hadoMarket",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "hadoMarketValidation",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "creatorHash",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        }
      ]
    },
    {
      "name": "updatePerpetualMarket",
      "accounts": [
        {
          "name": "hadoMarket",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "fraktMarket",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "hadoRegistry",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "whitelistEntry",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "updateInterestPerpetualMarket",
      "accounts": [
        {
          "name": "hadoMarket",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "minMarketFee",
          "type": "u64"
        }
      ]
    },
    {
      "name": "borrowPerpetual",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "protocolFeeReceiver",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "metadataProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "authorizationRulesProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiverSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "perpetualBorrowParams",
          "type": {
            "vec": {
              "defined": "BorrowPerpetualParams"
            }
          }
        },
        {
          "name": "optimizeIntoReserves",
          "type": "bool"
        },
        {
          "name": "aprRate",
          "type": "u64"
        }
      ]
    },
    {
      "name": "borrowPerpetualSpl",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "fraktBond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for tokens"
          ]
        },
        {
          "name": "mutualBondVaultSplInTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userSplInTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "hadoMarket",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOffer",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOfferVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOfferVaultSplOutTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splInTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiver",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplOutTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiverSplOutTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splOutTokenMint",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "randomSeed",
          "type": "u64"
        },
        {
          "name": "optimizeIntoReserves",
          "type": "bool"
        },
        {
          "name": "amountToGet",
          "type": "u64"
        },
        {
          "name": "aprRate",
          "type": "u64"
        }
      ]
    },
    {
      "name": "claimPerpetualLoanTest",
      "accounts": [
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "fbond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "uninitializedOldBondOfferV2",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK old_bond_offer_v2"
          ]
        }
      ],
      "args": []
    },
    {
      "name": "claimPerpetualLoanV2Spl",
      "accounts": [
        {
          "name": "oldBondOfferV2",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "fbond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mutualBondTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "terminatePerpetualLoan",
      "accounts": [
        {
          "name": "fbond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "bondOffer",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "instantRefinancePerpetualLoan",
      "accounts": [
        {
          "name": "fbond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOfferV2",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "uninitializedOldBondOfferV2",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK old_bond_offer_v2"
          ]
        },
        {
          "name": "bondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "oldBondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "oldBondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "hadoMarket",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "protocolFeeReceiver",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "sponsorVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK sponsor vault"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "vaultSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "oldVaultSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiverSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "lenderSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "newApr",
          "type": "u64"
        }
      ]
    },
    {
      "name": "borrowerRefinance",
      "accounts": [
        {
          "name": "fbond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOfferV2",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "uninitializedOldBondOfferV2",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK old_bond_offer_v2"
          ]
        },
        {
          "name": "bondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "oldBondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "oldBondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "hadoMarket",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "lender",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiver",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "sponsorVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK sponsor vault"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "vaultSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "oldVaultSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiverSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "lenderSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "solToRefinance",
          "type": "u64"
        },
        {
          "name": "bondOfferRandomSeed",
          "type": "u64"
        },
        {
          "name": "aprRate",
          "type": "u64"
        }
      ]
    },
    {
      "name": "borrowStakedBanxPerpetual",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "protocolFeeReceiver",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "metadataProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "authorizationRulesProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "ownerTokenRecord",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiverSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "perpetualBorrowParams",
          "type": {
            "vec": {
              "defined": "BorrowPerpetualParams"
            }
          }
        },
        {
          "name": "optimizeIntoReserves",
          "type": "bool"
        },
        {
          "name": "aprRate",
          "type": "u64"
        }
      ]
    },
    {
      "name": "repayStakedBanxPerpetualLoan",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "metadataProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "authorizationRulesProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiverSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "borrowCnftPerpetual",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "bondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol doesnt fit into the instruction"
          ]
        },
        {
          "name": "protocolFeeReceiver",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "bondOffer",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "treeAuthority",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "sponsorVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "whitelistEntry",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "merkleTree",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "hadoMarketValidation",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "logWrapper",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "compressionProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "bubblegumProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "nftMint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "vaultSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiverSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "perpetualBorrowParam",
          "type": {
            "defined": "BorrowPerpetualParams"
          }
        },
        {
          "name": "root",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "dataHash",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "creatorHash",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "nonce",
          "type": "u64"
        },
        {
          "name": "index",
          "type": "u32"
        },
        {
          "name": "proofLen",
          "type": "u8"
        },
        {
          "name": "optimizeIntoReserves",
          "type": "bool"
        },
        {
          "name": "aprRate",
          "type": "u64"
        }
      ]
    },
    {
      "name": "repayCnftPerpetualLoan",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "bondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "uninitializedBondOfferV2",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK bond_offer_v2"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "treeAuthority",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "merkleTree",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "logWrapper",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "compressionProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "bubblegumProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "vaultSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiverSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "root",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "dataHash",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "creatorHash",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "nonce",
          "type": "u64"
        },
        {
          "name": "index",
          "type": "u32"
        },
        {
          "name": "proofLen",
          "type": "u8"
        }
      ]
    },
    {
      "name": "claimCnftPerpetualLoan",
      "accounts": [
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "fbond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "treeAuthority",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "merkleTree",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "logWrapper",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "compressionProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "bubblegumProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "uninitializedOldBondOfferV2",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK old_bond_offer_v2"
          ]
        }
      ],
      "args": [
        {
          "name": "root",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "dataHash",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "creatorHash",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "nonce",
          "type": "u64"
        },
        {
          "name": "index",
          "type": "u32"
        },
        {
          "name": "proofLen",
          "type": "u8"
        }
      ]
    },
    {
      "name": "repayPartialPerpetualLoan",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "lender",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "uninitializedOldBondOfferV2",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK old_bond_offer_v2"
          ]
        },
        {
          "name": "oldBondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "repaidBondTradeTransaction",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "fbond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiver",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "vaultSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiverSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "lenderSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "fractionToRepay",
          "type": "u64"
        }
      ]
    },
    {
      "name": "transferToSponsorVault",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "sponsorVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK sponsor vault"
          ]
        }
      ],
      "args": [
        {
          "name": "solToTransfer",
          "type": "u64"
        }
      ]
    },
    {
      "name": "withdrawFromSponsorVault",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "sponsorVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK sponsor vault"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amountOfSolToWithdraw",
          "type": "u64"
        }
      ]
    },
    {
      "name": "createPerpetualBondOfferBonding",
      "accounts": [
        {
          "name": "bondOfferV2",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "hadoMarket",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "bondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "vaultSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "bondOfferRandomSeed",
          "type": "u64"
        },
        {
          "name": "loanValue",
          "type": "u64"
        },
        {
          "name": "quantityOfLoans",
          "type": "u64"
        },
        {
          "name": "bondingCurveType",
          "type": {
            "defined": "BondOfferBondingCurveType"
          }
        },
        {
          "name": "delta",
          "type": "u64"
        },
        {
          "name": "isSplFeature",
          "type": "bool"
        },
        {
          "name": "collateralsPerToken",
          "type": "u64"
        }
      ]
    },
    {
      "name": "updatePerpetualOfferBonding",
      "accounts": [
        {
          "name": "bondOfferV2",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "bondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "vaultSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "loanValue",
          "type": "u64"
        },
        {
          "name": "quantityOfLoans",
          "type": "u64"
        },
        {
          "name": "delta",
          "type": "u64"
        },
        {
          "name": "collateralsPerToken",
          "type": "u64"
        }
      ]
    },
    {
      "name": "claimPerpetualBondOfferInterest",
      "accounts": [
        {
          "name": "bondOfferV2",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "vaultSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "claimPerpetualBondOfferReserves",
      "accounts": [
        {
          "name": "bondOfferV2",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "borrowerRefinanceToSame",
      "accounts": [
        {
          "name": "fbond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOfferV2",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "oldBondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "oldBondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "hadoMarket",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "lender",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiver",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "sponsorVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK sponsor vault"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "vaultSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "oldVaultSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiverSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "lenderSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "solToRefinance",
          "type": "u64"
        },
        {
          "name": "bondOfferRandomSeed",
          "type": "u64"
        },
        {
          "name": "aprRate",
          "type": "u64"
        }
      ]
    },
    {
      "name": "setRepaymentCall",
      "accounts": [
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "callAmount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "subscribeBanxAdventure",
      "accounts": [
        {
          "name": "banxStakingSettings",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxTokenStake",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "subscribeBanxAdventureParams",
          "type": {
            "vec": {
              "defined": "SubscribeBanxAdventureParams"
            }
          }
        }
      ]
    },
    {
      "name": "subscribeBanxAdventureAdmin",
      "accounts": [
        {
          "name": "banxStakingSettings",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxTokenStake",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxTokenStakeUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "subscribeBanxAdventureParams",
          "type": {
            "vec": {
              "defined": "SubscribeBanxAdventureParams"
            }
          }
        }
      ]
    },
    {
      "name": "claimStakingRewards",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxTokenStake",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxStakingVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "banxStakingSettings",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxStakingVaultTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "hadesTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userHadesTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxStakingVaultHadesTokenAccount",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "stakeBanxNft",
      "accounts": [
        {
          "name": "banxStakingSettings",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxStake",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "banxTokenStake",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxPointsMap",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "hadoRegistry",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "whitelistEntry",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "metadataProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "editionInfo",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "nftMetadata",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "ownerTokenRecord",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "authorizationRulesProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "currentWeekBanxAdventure",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "firstWeekBanxAdventure",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "secondWeekBanxAdventure",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "currentWeekBanxAdventureSubscription",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "firstWeekBanxAdventureSubscription",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "secondWeekBanxAdventureSubscription",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        }
      ],
      "args": [
        {
          "name": "subscribeBanxAdventureParams",
          "type": {
            "vec": {
              "defined": "SubscribeBanxAdventureParams"
            }
          }
        }
      ]
    },
    {
      "name": "stakeBanxToken",
      "accounts": [
        {
          "name": "banxStakingSettings",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxTokenStake",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxStakingVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "banxStakingVaultTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "currentWeekBanxAdventure",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "firstWeekBanxAdventure",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "secondWeekBanxAdventure",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "currentWeekBanxAdventureSubscription",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "firstWeekBanxAdventureSubscription",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "secondWeekBanxAdventureSubscription",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        }
      ],
      "args": [
        {
          "name": "tokensToStake",
          "type": "u64"
        },
        {
          "name": "subscribeBanxAdventureParams",
          "type": {
            "vec": {
              "defined": "SubscribeBanxAdventureParams"
            }
          }
        }
      ]
    },
    {
      "name": "unstakeBanxTokens",
      "accounts": [
        {
          "name": "banxStakingSettings",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxTokenStake",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxStakingVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "banxStakingVaultTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "currentWeekBanxAdventure",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "firstWeekBanxAdventure",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "secondWeekBanxAdventure",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "currentWeekBanxAdventureSubscription",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "firstWeekBanxAdventureSubscription",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "secondWeekBanxAdventureSubscription",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        }
      ],
      "args": [
        {
          "name": "tokensToUnstake",
          "type": "u64"
        }
      ]
    },
    {
      "name": "unstakeBanxNft",
      "accounts": [
        {
          "name": "banxStakingSettings",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxStake",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxTokenStake",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "metadataProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "editionInfo",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "nftMetadata",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "authorizationRulesProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "authRules",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "ownerTokenRecord",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "destTokenRecord",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "currentWeekBanxAdventure",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "firstWeekBanxAdventure",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "secondWeekBanxAdventure",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "currentWeekBanxAdventureSubscription",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "firstWeekBanxAdventureSubscription",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "secondWeekBanxAdventureSubscription",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        }
      ],
      "args": []
    },
    {
      "name": "claimPerpetualLoanV2",
      "accounts": [
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "fbond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxStake",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxTokenStake",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxStakingSettings",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "collateralOwner",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "collateralTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mutualBondTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "authRules",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "metadataProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "editionInfo",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "nftMetadata",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "ownerTokenRecord",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "middleTokenRecord",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "destTokenRecord",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "authorizationRulesProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "uninitializedOldBondOfferV2",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK old_bond_offer_v2"
          ]
        },
        {
          "name": "currentWeekBanxAdventure",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "firstWeekBanxAdventure",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "secondWeekBanxAdventure",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "currentWeekBanxAdventureSubscription",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "firstWeekBanxAdventureSubscription",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "secondWeekBanxAdventureSubscription",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        }
      ],
      "args": [
        {
          "name": "authorizationData",
          "type": {
            "option": {
              "defined": "AuthorizationDataLocal"
            }
          }
        }
      ]
    },
    {
      "name": "updateBanxStakingSettings",
      "accounts": [
        {
          "name": "banxStakingSettings",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "maxTokenStakeAmount",
          "type": "u64"
        },
        {
          "name": "tokensPerPartnerPoints",
          "type": "u64"
        },
        {
          "name": "tokensPerWeek",
          "type": "u64"
        },
        {
          "name": "hadesPerWeek",
          "type": "u64"
        }
      ]
    },
    {
      "name": "createBanxTokenStake",
      "accounts": [
        {
          "name": "banxStakingSettings",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxTokenStake",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxTokenStakeUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "banxNftsStakedQuantity",
          "type": "u64"
        },
        {
          "name": "partnerPoints",
          "type": "u64"
        },
        {
          "name": "playerPoints",
          "type": "u64"
        }
      ]
    },
    {
      "name": "withdrawRewardAdmin",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxStakingVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "banxStakingVaultTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amountOfTokensToWithdraw",
          "type": "u64"
        }
      ]
    },
    {
      "name": "changeBanxAdventureRevAdmin",
      "accounts": [
        {
          "name": "banxAdventure",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "newwRev",
          "type": "u64"
        }
      ]
    },
    {
      "name": "createPerpetualListingCnft",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "fraktBond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOffer",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "whitelistEntry",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "merkleTree",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "hadoMarketValidation",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "logWrapper",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "compressionProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "bubblegumProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "uninitializedTokenMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK token_mint"
          ]
        },
        {
          "name": "uninitializedHadoMarket",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK token_mint"
          ]
        },
        {
          "name": "treeAuthority",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK tree_authority"
          ]
        }
      ],
      "args": [
        {
          "name": "randomSeed",
          "type": "u64"
        },
        {
          "name": "amountOfSolToGet",
          "type": "u64"
        },
        {
          "name": "aprRate",
          "type": "u64"
        },
        {
          "name": "isBorrowerListing",
          "type": "bool"
        },
        {
          "name": "lendingToken",
          "type": {
            "defined": "LendingTokenType"
          }
        },
        {
          "name": "terminationFreeze",
          "type": "u64"
        },
        {
          "name": "root",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "dataHash",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "creatorHash",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "nonce",
          "type": "u64"
        },
        {
          "name": "index",
          "type": "u32"
        },
        {
          "name": "proofLen",
          "type": "u8"
        }
      ]
    },
    {
      "name": "createPerpetualListing",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "fraktBond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOffer",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "metadataProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "authorizationRulesProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "uninitializedTokenMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK token_mint"
          ]
        },
        {
          "name": "uninitializedHadoMarket",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK token_mint"
          ]
        },
        {
          "name": "uninitializedBanxPointMap",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK token_mint"
          ]
        },
        {
          "name": "uninitializedUserTokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK token_mint"
          ]
        }
      ],
      "args": [
        {
          "name": "randomSeed",
          "type": "u64"
        },
        {
          "name": "amountOfSolToGet",
          "type": "u64"
        },
        {
          "name": "aprRate",
          "type": "u64"
        },
        {
          "name": "isBorrowerListing",
          "type": "bool"
        },
        {
          "name": "lendingToken",
          "type": {
            "defined": "LendingTokenType"
          }
        },
        {
          "name": "terminationFreeze",
          "type": "u64"
        }
      ]
    },
    {
      "name": "createPerpetualListingSpl",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "fraktBond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOffer",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "mutualBondVaultSplInTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "splInTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "hadoMarket",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "uninitializedUserTokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK token_mint"
          ]
        }
      ],
      "args": [
        {
          "name": "randomSeed",
          "type": "u64"
        },
        {
          "name": "amountOfSolToGet",
          "type": "u64"
        },
        {
          "name": "aprRate",
          "type": "u64"
        },
        {
          "name": "isBorrowerListing",
          "type": "bool"
        },
        {
          "name": "lendingToken",
          "type": {
            "defined": "LendingTokenType"
          }
        },
        {
          "name": "terminationFreeze",
          "type": "u64"
        },
        {
          "name": "collateralsPerToken",
          "type": "u64"
        }
      ]
    },
    {
      "name": "createPerpetualListingStakedBanx",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "fraktBond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOffer",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxStake",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "uninitializedTokenMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK token_mint"
          ]
        },
        {
          "name": "uninitializedHadoMarket",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK token_mint"
          ]
        },
        {
          "name": "uninitializedBanxPointMap",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK token_mint"
          ]
        },
        {
          "name": "uninitializedUserTokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK token_mint"
          ]
        }
      ],
      "args": [
        {
          "name": "randomSeed",
          "type": "u64"
        },
        {
          "name": "amountOfSolToGet",
          "type": "u64"
        },
        {
          "name": "aprRate",
          "type": "u64"
        },
        {
          "name": "isBorrowerListing",
          "type": "bool"
        },
        {
          "name": "lendingToken",
          "type": {
            "defined": "LendingTokenType"
          }
        },
        {
          "name": "terminationFreeze",
          "type": "u64"
        }
      ]
    },
    {
      "name": "lendToBorrowerListing",
      "accounts": [
        {
          "name": "fbond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOfferV2",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "oldBondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "hadoMarket",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "protocolFeeReceiver",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "sponsorVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK sponsor vault"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "borrower",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "borrowerSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "oldVaultSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReceiverSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "removePerpetualListingCnft",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "fraktBond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOffer",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "metadataProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "uninitializedTokenMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK token_mint"
          ]
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "authorizationRulesProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "treeAuthority",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "merkleTree",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "logWrapper",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "compressionProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "bubblegumProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "isBorrowerListing",
          "type": "bool"
        },
        {
          "name": "root",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "dataHash",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "creatorHash",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "nonce",
          "type": "u64"
        },
        {
          "name": "index",
          "type": "u32"
        },
        {
          "name": "proofLen",
          "type": "u8"
        }
      ]
    },
    {
      "name": "removePerpetualListingStakedBanx",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "fraktBond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOffer",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxStake",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "isBorrowerListing",
          "type": "bool"
        }
      ]
    },
    {
      "name": "removePerpetualListing",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "fraktBond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOffer",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "metadataProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "authorizationRulesProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "uninitializedTokenMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK token_mint"
          ]
        },
        {
          "name": "uninitializedUserTokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK token_mint"
          ]
        }
      ],
      "args": [
        {
          "name": "isBorrowerListing",
          "type": "bool"
        }
      ]
    },
    {
      "name": "removePerpetualListingSpl",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "bondTradeTransaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "fraktBond",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOffer",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mutualBondTradeTxnVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "mutualBondVaultSplInTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK token_mint"
          ]
        },
        {
          "name": "uninitializedUserTokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK token_mint"
          ]
        }
      ],
      "args": [
        {
          "name": "isBorrowerListing",
          "type": "bool"
        }
      ]
    },
    {
      "name": "patchBanxTokenStakeAdmin",
      "accounts": [
        {
          "name": "banxTokenStake",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "nftsAmount",
          "type": "u64"
        },
        {
          "name": "partnerPointsAmount",
          "type": "u64"
        },
        {
          "name": "playerPointsAmount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "closeTokenAccountsBanxSol",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "wrappedSolTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxSolTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolFeeReciver",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxSolFeeTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "banxSolMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "wrappedSolMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "migrateBondOfferToV3",
      "accounts": [
        {
          "name": "bondOffer",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "vaultSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "patchBidCapInOffer",
      "accounts": [
        {
          "name": "bondOffer",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "claimPerpetualBondOfferRepayments",
      "accounts": [
        {
          "name": "bondOfferV2",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bondOfferVault",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "CHECK vault for sol"
          ]
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "vaultSplTokenAccountUninitialized",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "splTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    }
  ],
  "accounts": [
    {
      "name": "banxAdventureSubscription",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "adventureSubscriptionState",
            "type": {
              "defined": "BanxAdventureSubscriptionState"
            }
          },
          {
            "name": "user",
            "type": "publicKey"
          },
          {
            "name": "adventure",
            "type": "publicKey"
          },
          {
            "name": "banxTokenStake",
            "type": "publicKey"
          },
          {
            "name": "stakeTokensAmount",
            "type": "u64"
          },
          {
            "name": "stakeNftAmount",
            "type": "u64"
          },
          {
            "name": "stakePartnerPointsAmount",
            "type": "u64"
          },
          {
            "name": "stakePlayerPointsAmount",
            "type": "u64"
          },
          {
            "name": "subscribedAt",
            "type": "u64"
          },
          {
            "name": "unsubscribedAt",
            "type": "u64"
          },
          {
            "name": "harvestedAt",
            "type": "u64"
          },
          {
            "name": "amountOfTokensHarvested",
            "type": "u64"
          },
          {
            "name": "amountOfHadesTokensHarvested",
            "type": "u64"
          },
          {
            "name": "placeholderTwo",
            "type": "u64"
          },
          {
            "name": "placeholderThree",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "banxAdventure",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "adventureState",
            "type": {
              "defined": "BanxAdventureState"
            }
          },
          {
            "name": "tokensPerPoints",
            "type": "u64"
          },
          {
            "name": "week",
            "type": "u64"
          },
          {
            "name": "periodStartedAt",
            "type": "u64"
          },
          {
            "name": "periodEndingAt",
            "type": "u64"
          },
          {
            "name": "rewardsToBeDistributed",
            "type": "u64"
          },
          {
            "name": "totalPartnerPoints",
            "type": "u64"
          },
          {
            "name": "totalPlayerPoints",
            "type": "u64"
          },
          {
            "name": "totalTokensStaked",
            "type": "u64"
          },
          {
            "name": "totalBanxSubscribed",
            "type": "u64"
          },
          {
            "name": "amountOfTokensHarvested",
            "type": "u64"
          },
          {
            "name": "placeholderOne",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "banxStakingSettings",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "banxStakingSettingsState",
            "type": {
              "defined": "BanxStakingSettingsState"
            }
          },
          {
            "name": "maxTokenStakeAmount",
            "type": "u64"
          },
          {
            "name": "tokensPerPartnerPoints",
            "type": "u64"
          },
          {
            "name": "tokensStaked",
            "type": "u64"
          },
          {
            "name": "banxStaked",
            "type": "u64"
          },
          {
            "name": "tokensPerWeek",
            "type": "u64"
          },
          {
            "name": "rewardsHarvested",
            "type": "u64"
          },
          {
            "name": "hadesPerWeek",
            "type": "u64"
          },
          {
            "name": "placeholderTwo",
            "type": "u64"
          },
          {
            "name": "placeholderThree",
            "type": "u64"
          },
          {
            "name": "placeholderFour",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "banxTokenStake",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "banxStakeState",
            "type": {
              "defined": "BanxTokenStakeState"
            }
          },
          {
            "name": "user",
            "type": "publicKey"
          },
          {
            "name": "adventureSubscriptionsQuantity",
            "type": "u64"
          },
          {
            "name": "tokensStaked",
            "type": "u64"
          },
          {
            "name": "partnerPointsStaked",
            "type": "u64"
          },
          {
            "name": "playerPointsStaked",
            "type": "u64"
          },
          {
            "name": "banxNftsStakedQuantity",
            "type": "u64"
          },
          {
            "name": "stakedAt",
            "type": "u64"
          },
          {
            "name": "unstakedAt",
            "type": "u64"
          },
          {
            "name": "farmedAmount",
            "type": "u64"
          },
          {
            "name": "nftsStakedAt",
            "type": "u64"
          },
          {
            "name": "nftsUnstakedAt",
            "type": "u64"
          },
          {
            "name": "placeholderOne",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "collateralBox",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "fbond",
            "type": "publicKey"
          },
          {
            "name": "collateralBoxType",
            "type": {
              "defined": "CollateralBoxType"
            }
          },
          {
            "name": "collateralTokenMint",
            "type": "publicKey"
          },
          {
            "name": "collateralTokenAccount",
            "type": "publicKey"
          },
          {
            "name": "collateralAmount",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "fraktBond",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "fraktBondState",
            "type": {
              "defined": "FraktBondState"
            }
          },
          {
            "name": "bondTradeTransactionsCounter",
            "type": "u8"
          },
          {
            "name": "borrowedAmount",
            "type": "u64"
          },
          {
            "name": "banxStake",
            "type": "publicKey"
          },
          {
            "name": "fraktMarket",
            "type": "publicKey"
          },
          {
            "name": "amountToReturn",
            "type": "u64"
          },
          {
            "name": "actualReturnedAmount",
            "type": "u64"
          },
          {
            "name": "terminatedCounter",
            "type": "u8"
          },
          {
            "name": "fbondTokenMint",
            "type": "publicKey"
          },
          {
            "name": "fbondTokenSupply",
            "type": "u64"
          },
          {
            "name": "activatedAt",
            "type": "u64"
          },
          {
            "name": "liquidatingAt",
            "type": "u64"
          },
          {
            "name": "fbondIssuer",
            "type": "publicKey"
          },
          {
            "name": "repaidOrLiquidatedAt",
            "type": "u64"
          },
          {
            "name": "currentPerpetualBorrowed",
            "type": "u64"
          },
          {
            "name": "lastTransactedAt",
            "type": "u64"
          },
          {
            "name": "refinanceAuctionStartedAt",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "flashLoanPool",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "type": "publicKey"
          },
          {
            "name": "borrowing",
            "type": "bool"
          },
          {
            "name": "balance",
            "type": "u64"
          },
          {
            "name": "loanFeePoints",
            "type": "u16"
          }
        ]
      }
    },
    {
      "name": "proposal",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "state",
            "type": {
              "defined": "ProposalState"
            }
          },
          {
            "name": "name",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "week",
            "type": "u64"
          },
          {
            "name": "duration",
            "type": "u64"
          },
          {
            "name": "pointsQuorum",
            "type": "u64"
          },
          {
            "name": "creator",
            "type": "publicKey"
          },
          {
            "name": "participants",
            "type": "u64"
          },
          {
            "name": "pointsTotal",
            "type": "u64"
          },
          {
            "name": "initializedAt",
            "type": "u64"
          },
          {
            "name": "lastTransactedAt",
            "type": "u64"
          },
          {
            "name": "placeholder1",
            "type": "u64"
          },
          {
            "name": "placeholder2",
            "type": "u64"
          },
          {
            "name": "placeholder3",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "proposalVariant",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "proposal",
            "type": "publicKey"
          },
          {
            "name": "name",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "state",
            "type": {
              "defined": "ProposalState"
            }
          },
          {
            "name": "participants",
            "type": "u64"
          },
          {
            "name": "pointsTotal",
            "type": "u64"
          },
          {
            "name": "lastTransactedAt",
            "type": "u64"
          },
          {
            "name": "placeholder1",
            "type": "u64"
          },
          {
            "name": "placeholder2",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "proposalVote",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "state",
            "type": {
              "defined": "ProposalState"
            }
          },
          {
            "name": "proposalVariant",
            "type": "publicKey"
          },
          {
            "name": "adventureSubscription",
            "type": "publicKey"
          },
          {
            "name": "user",
            "type": "publicKey"
          },
          {
            "name": "points",
            "type": "u64"
          },
          {
            "name": "lastTransactedAt",
            "type": "u64"
          },
          {
            "name": "placeholder",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "hadoMarketRegistry",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "hadoMarket",
            "type": "publicKey"
          },
          {
            "name": "fraktMarket",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "hadoMarketValidation",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "hadoMarket",
            "type": "publicKey"
          },
          {
            "name": "creatorHash",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "placeholderOne",
            "type": "publicKey"
          },
          {
            "name": "placeholderTwo",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "hadoMarket",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "marketAuthority",
            "type": "publicKey"
          },
          {
            "name": "marketState",
            "type": {
              "defined": "MarketState"
            }
          },
          {
            "name": "marketTrustType",
            "type": {
              "defined": "MarketTrustType"
            }
          },
          {
            "name": "pairValidationType",
            "type": {
              "defined": "PairValidationType"
            }
          },
          {
            "name": "fraktMarket",
            "type": "publicKey"
          },
          {
            "name": "minBidCap",
            "type": "u64"
          },
          {
            "name": "minMarketFee",
            "type": "u64"
          },
          {
            "name": "whitelistType",
            "type": {
              "defined": "NftValidationWhitelistTypeHado"
            }
          },
          {
            "name": "whitelistedAddress",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "bondOfferV2",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "hadoMarket",
            "type": "publicKey"
          },
          {
            "name": "pairState",
            "type": {
              "defined": "PairState"
            }
          },
          {
            "name": "bondingCurve",
            "type": {
              "defined": "BondOfferBondingCurve"
            }
          },
          {
            "name": "baseSpotPrice",
            "type": "u64"
          },
          {
            "name": "mathCounter",
            "type": "i64"
          },
          {
            "name": "currentSpotPrice",
            "type": "u64"
          },
          {
            "name": "concentrationIndex",
            "type": "u64"
          },
          {
            "name": "bidCap",
            "type": "u64"
          },
          {
            "name": "bidSettlement",
            "type": "i64"
          },
          {
            "name": "edgeSettlement",
            "type": "u64"
          },
          {
            "name": "fundsSolOrTokenBalance",
            "type": "u64"
          },
          {
            "name": "buyOrdersQuantity",
            "type": "u64"
          },
          {
            "name": "lastTransactedAt",
            "type": "u64"
          },
          {
            "name": "assetReceiver",
            "type": "publicKey"
          },
          {
            "name": "validation",
            "type": {
              "defined": "BondOfferValidation"
            }
          }
        ]
      }
    },
    {
      "name": "bondOfferV3",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "hadoMarket",
            "type": "publicKey"
          },
          {
            "name": "pairState",
            "type": {
              "defined": "PairState"
            }
          },
          {
            "name": "bondingCurve",
            "type": {
              "defined": "BondOfferBondingCurve"
            }
          },
          {
            "name": "baseSpotPrice",
            "type": "u64"
          },
          {
            "name": "mathCounter",
            "type": "i64"
          },
          {
            "name": "currentSpotPrice",
            "type": "u64"
          },
          {
            "name": "concentrationIndex",
            "type": "u64"
          },
          {
            "name": "bidCap",
            "type": "u64"
          },
          {
            "name": "bidSettlement",
            "type": "i64"
          },
          {
            "name": "edgeSettlement",
            "type": "u64"
          },
          {
            "name": "fundsSolOrTokenBalance",
            "type": "u64"
          },
          {
            "name": "buyOrdersQuantity",
            "type": "u64"
          },
          {
            "name": "lastTransactedAt",
            "type": "u64"
          },
          {
            "name": "assetReceiver",
            "type": "publicKey"
          },
          {
            "name": "validation",
            "type": {
              "defined": "BondOfferValidation"
            }
          },
          {
            "name": "fundsInCurrentEpoch",
            "type": "u64"
          },
          {
            "name": "fundsInNextEpoch",
            "type": "u64"
          },
          {
            "name": "lastCalculatedSlot",
            "type": "u64"
          },
          {
            "name": "lastCalculatedTimestamp",
            "type": "u64"
          },
          {
            "name": "rewardsToHarvest",
            "type": "u64"
          },
          {
            "name": "rewardsToHarvested",
            "type": "u64"
          },
          {
            "name": "placeholderOne",
            "type": "u64"
          },
          {
            "name": "placeholderTwo",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "bondTradeTransactionV2",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bondTradeTransactionState",
            "type": {
              "defined": "BondTradeTransactionV2State"
            }
          },
          {
            "name": "bondOffer",
            "type": "publicKey"
          },
          {
            "name": "user",
            "type": "publicKey"
          },
          {
            "name": "amountOfBonds",
            "type": "u64"
          },
          {
            "name": "solAmount",
            "type": "u64"
          },
          {
            "name": "feeAmount",
            "type": "u64"
          },
          {
            "name": "bondTradeTransactionType",
            "type": {
              "defined": "BondTradeTransactionV2Type"
            }
          },
          {
            "name": "fbondTokenMint",
            "type": "publicKey"
          },
          {
            "name": "soldAt",
            "type": "u64"
          },
          {
            "name": "redeemedAt",
            "type": "u64"
          },
          {
            "name": "redeemResult",
            "type": {
              "defined": "RedeemResult"
            }
          },
          {
            "name": "seller",
            "type": "publicKey"
          },
          {
            "name": "isDirectSell",
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "bondTradeTransactionV3",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bondTradeTransactionState",
            "type": {
              "defined": "BondTradeTransactionV2State"
            }
          },
          {
            "name": "bondOffer",
            "type": "publicKey"
          },
          {
            "name": "user",
            "type": "publicKey"
          },
          {
            "name": "amountOfBonds",
            "type": "u64"
          },
          {
            "name": "solAmount",
            "type": "u64"
          },
          {
            "name": "feeAmount",
            "type": "u64"
          },
          {
            "name": "bondTradeTransactionType",
            "type": {
              "defined": "BondTradeTransactionV2Type"
            }
          },
          {
            "name": "fbondTokenMint",
            "type": "publicKey"
          },
          {
            "name": "soldAt",
            "type": "u64"
          },
          {
            "name": "redeemedAt",
            "type": "u64"
          },
          {
            "name": "redeemResult",
            "type": {
              "defined": "RedeemResult"
            }
          },
          {
            "name": "seller",
            "type": "publicKey"
          },
          {
            "name": "isDirectSell",
            "type": "bool"
          },
          {
            "name": "lendingToken",
            "type": {
              "defined": "LendingTokenType"
            }
          },
          {
            "name": "currentRemainingLent",
            "type": "u64"
          },
          {
            "name": "interestSnapshot",
            "type": "u64"
          },
          {
            "name": "partialRepaySnapshot",
            "type": "u64"
          },
          {
            "name": "terminationStartedAt",
            "type": "u64"
          },
          {
            "name": "lenderOriginalLent",
            "type": "u64"
          },
          {
            "name": "lenderFullRepaidAmount",
            "type": "u64"
          },
          {
            "name": "borrowerOriginalLent",
            "type": "u64"
          },
          {
            "name": "borrowerFullRepaidAmount",
            "type": "u64"
          },
          {
            "name": "repayDestination",
            "type": {
              "defined": "RepayDestination"
            }
          },
          {
            "name": "repaymentCallAmount",
            "type": "u64"
          },
          {
            "name": "terminationFreeze",
            "type": "u64"
          },
          {
            "name": "placeholder3",
            "type": "u64"
          },
          {
            "name": "placeholder4",
            "type": "u64"
          },
          {
            "name": "placeholder5",
            "type": "u64"
          },
          {
            "name": "placeholder6",
            "type": "u64"
          },
          {
            "name": "placeholder7",
            "type": "u64"
          },
          {
            "name": "placeholder8",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "repaymentCall",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "callState",
            "type": {
              "defined": "CallState"
            }
          },
          {
            "name": "user",
            "type": "publicKey"
          },
          {
            "name": "bond",
            "type": "publicKey"
          },
          {
            "name": "bondTradeTransaction",
            "type": "publicKey"
          },
          {
            "name": "callAmount",
            "type": "u64"
          },
          {
            "name": "lastUpdatedAt",
            "type": "u64"
          },
          {
            "name": "lastCallAt",
            "type": "u64"
          },
          {
            "name": "lastRepaidAt",
            "type": "u64"
          },
          {
            "name": "placeholderOne",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "adventureSubscription",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "user",
            "type": "publicKey"
          },
          {
            "name": "stake",
            "type": "publicKey"
          },
          {
            "name": "adventure",
            "type": "publicKey"
          },
          {
            "name": "subscribedAt",
            "type": "u64"
          },
          {
            "name": "unsubscribedAt",
            "type": "u64"
          },
          {
            "name": "harvestedAt",
            "type": "u64"
          },
          {
            "name": "amountOfSolHarvested",
            "type": "u64"
          },
          {
            "name": "placeholderOne",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "adventure",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "adventureState",
            "type": {
              "defined": "AdventureState"
            }
          },
          {
            "name": "periodStartedAt",
            "type": "u64"
          },
          {
            "name": "periodEndingAt",
            "type": "u64"
          },
          {
            "name": "rewardsUpperLimit",
            "type": "u64"
          },
          {
            "name": "rewardsLowerLimit",
            "type": "u64"
          },
          {
            "name": "totalPeriodRevenue",
            "type": "u64"
          },
          {
            "name": "rewardsToBeDistributed",
            "type": "u64"
          },
          {
            "name": "totalBanxSubscribed",
            "type": "u64"
          },
          {
            "name": "totalPartnerPoints",
            "type": "u64"
          },
          {
            "name": "totalPlayerPoints",
            "type": "u64"
          },
          {
            "name": "banxSubscribedLeft",
            "type": "u64"
          },
          {
            "name": "partnerPointsLeft",
            "type": "u64"
          },
          {
            "name": "playerPointsLeft",
            "type": "u64"
          },
          {
            "name": "rewardsLeft",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "banxPointsMap",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "banxMint",
            "type": "publicKey"
          },
          {
            "name": "playerPoints",
            "type": "u64"
          },
          {
            "name": "partnerPoints",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "banxStake",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "banxStakeState",
            "type": {
              "defined": "BanxStakeState"
            }
          },
          {
            "name": "adventureSubscriptionsQuantity",
            "type": "u64"
          },
          {
            "name": "nftMint",
            "type": "publicKey"
          },
          {
            "name": "collateralTokenAccount",
            "type": "publicKey"
          },
          {
            "name": "user",
            "type": "publicKey"
          },
          {
            "name": "stakedAt",
            "type": "u64"
          },
          {
            "name": "unstakedOrLiquidatedAt",
            "type": "u64"
          },
          {
            "name": "isLoaned",
            "type": "bool"
          },
          {
            "name": "bond",
            "type": "publicKey"
          },
          {
            "name": "playerPoints",
            "type": "u64"
          },
          {
            "name": "partnerPoints",
            "type": "u64"
          },
          {
            "name": "farmedAmount",
            "type": "u64"
          },
          {
            "name": "placeholderOne",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "banxUser",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "user",
            "type": "publicKey"
          },
          {
            "name": "stakedPlayerPoints",
            "type": "u64"
          },
          {
            "name": "stakedPartnerPoints",
            "type": "u64"
          },
          {
            "name": "stakedBanx",
            "type": "u64"
          },
          {
            "name": "totalHarvestedRewards",
            "type": "u64"
          },
          {
            "name": "freeLiquidityCurrent",
            "type": "u64"
          },
          {
            "name": "placeholderOne",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "stakingSettings",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "mainVaultBalance",
            "type": "u64"
          },
          {
            "name": "upperRewardsLimit",
            "type": "u64"
          },
          {
            "name": "lowerRewardsLimit",
            "type": "u64"
          },
          {
            "name": "placeholderOne",
            "type": "publicKey"
          }
        ]
      }
    }
  ],
  "types": [
    {
      "name": "SaveProposalParams",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "name",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "week",
            "type": "u64"
          },
          {
            "name": "duration",
            "type": "u64"
          },
          {
            "name": "pointsQuorum",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "SaveVariantParams",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "name",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          }
        ]
      }
    },
    {
      "name": "InitializeHadoMarketParams",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "minBidCap",
            "type": "u64"
          },
          {
            "name": "minMarketFee",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "BorrowPerpetualParams",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "minAmountToGet",
            "type": "u64"
          },
          {
            "name": "amountOfSolToGet",
            "type": "u64"
          },
          {
            "name": "bondTradeTransactionBump",
            "type": "u8"
          },
          {
            "name": "fraktBondBump",
            "type": "u8"
          },
          {
            "name": "bondOfferVaultBump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "MakePerpetualMarketParams",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "minBidCap",
            "type": "u64"
          },
          {
            "name": "minMarketFee",
            "type": "u64"
          },
          {
            "name": "marketState",
            "type": {
              "defined": "MarketState"
            }
          }
        ]
      }
    },
    {
      "name": "SubscribeBanxAdventureParams",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "week",
            "type": "u64"
          },
          {
            "name": "adventureBump",
            "type": "u8"
          },
          {
            "name": "subscriptionBump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "BondOfferValidation",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "loanToValueFilter",
            "type": "u64"
          },
          {
            "name": "collateralsPerToken",
            "type": "u64"
          },
          {
            "name": "maxReturnAmountFilter",
            "type": "u64"
          },
          {
            "name": "bondFeatures",
            "type": {
              "defined": "BondFeatures"
            }
          }
        ]
      }
    },
    {
      "name": "BondOfferBondingCurve",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "delta",
            "type": "u64"
          },
          {
            "name": "bondingType",
            "type": {
              "defined": "BondOfferBondingCurveType"
            }
          }
        ]
      }
    },
    {
      "name": "AuthorizationDataLocal",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "payload",
            "type": {
              "vec": {
                "defined": "TaggedPayload"
              }
            }
          }
        ]
      }
    },
    {
      "name": "TaggedPayload",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "payload",
            "type": {
              "defined": "PayloadTypeLocal"
            }
          }
        ]
      }
    },
    {
      "name": "SeedsVecLocal",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "seeds",
            "docs": [
              "The vector of derivation seeds."
            ],
            "type": {
              "vec": "bytes"
            }
          }
        ]
      }
    },
    {
      "name": "ProofInfoLocal",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "proof",
            "docs": [
              "The merkle proof."
            ],
            "type": {
              "vec": {
                "array": [
                  "u8",
                  32
                ]
              }
            }
          }
        ]
      }
    },
    {
      "name": "ProposalErrorCode",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "InvalidWeek"
          },
          {
            "name": "InvalidPreviousVariant"
          },
          {
            "name": "ProposalIsNotActive"
          }
        ]
      }
    },
    {
      "name": "BanxAdventureSubscriptionState",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "None"
          },
          {
            "name": "Active"
          },
          {
            "name": "Claimed"
          }
        ]
      }
    },
    {
      "name": "BanxAdventureState",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "None"
          },
          {
            "name": "Active"
          }
        ]
      }
    },
    {
      "name": "BanxStakingSettingsState",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "None"
          },
          {
            "name": "Active"
          }
        ]
      }
    },
    {
      "name": "BanxTokenStakeState",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "None"
          },
          {
            "name": "Staked"
          },
          {
            "name": "Unstaked"
          }
        ]
      }
    },
    {
      "name": "CollateralBoxType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Escrow"
          },
          {
            "name": "Escrowless"
          }
        ]
      }
    },
    {
      "name": "FraktBondState",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Initialized"
          },
          {
            "name": "Active"
          },
          {
            "name": "Repaid"
          },
          {
            "name": "Liquidating"
          },
          {
            "name": "Liquidated"
          },
          {
            "name": "PerpetualActive"
          },
          {
            "name": "PerpetualRepaid"
          },
          {
            "name": "PerpetualLiquidatedByAuction"
          },
          {
            "name": "PerpetualLiquidatedByClaim"
          }
        ]
      }
    },
    {
      "name": "ProposalState",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "None"
          },
          {
            "name": "Initialized"
          }
        ]
      }
    },
    {
      "name": "NftValidationWhitelistTypeHado",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Creator"
          },
          {
            "name": "Nft"
          },
          {
            "name": "MerkleTree"
          },
          {
            "name": "CollectionId"
          },
          {
            "name": "SplMint"
          }
        ]
      }
    },
    {
      "name": "MarketTrustType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Unverified"
          },
          {
            "name": "Verified"
          }
        ]
      }
    },
    {
      "name": "MarketState",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Initializing"
          },
          {
            "name": "Available"
          },
          {
            "name": "InitializingPerpetual"
          },
          {
            "name": "AvailablePerpetual"
          },
          {
            "name": "PrivateAvailablePerpetual"
          }
        ]
      }
    },
    {
      "name": "PairValidationType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "ClassicValidation"
          },
          {
            "name": "CustomValidation"
          }
        ]
      }
    },
    {
      "name": "PairTokenType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "NativeSol"
          },
          {
            "name": "Spl"
          }
        ]
      }
    },
    {
      "name": "BondFeatures",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "None"
          },
          {
            "name": "Autocompound"
          },
          {
            "name": "ReceiveNftOnLiquidation"
          },
          {
            "name": "AutoreceiveSol"
          },
          {
            "name": "AutoCompoundAndReceiveNft"
          },
          {
            "name": "AutoReceiveAndReceiveNft"
          },
          {
            "name": "AutoReceiveAndReceiveSpl"
          }
        ]
      }
    },
    {
      "name": "PairState",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Initializing"
          },
          {
            "name": "OnMarketVirtual"
          },
          {
            "name": "OnMarketTokenized"
          },
          {
            "name": "Frozen"
          },
          {
            "name": "Closed"
          },
          {
            "name": "PerpetualOnMarket"
          },
          {
            "name": "PerpetualClosed"
          },
          {
            "name": "PerpetualBondingCurveOnMarket"
          },
          {
            "name": "PerpetualMigrated"
          },
          {
            "name": "PerpetualBondingCurveClosed"
          },
          {
            "name": "PerpetualListing"
          }
        ]
      }
    },
    {
      "name": "BondOfferBondingCurveType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Linear"
          },
          {
            "name": "Exponential"
          },
          {
            "name": "LinearUsdc"
          },
          {
            "name": "ExponentialUsdc"
          },
          {
            "name": "LinearBanxSol"
          },
          {
            "name": "ExponentialBanxSol"
          }
        ]
      }
    },
    {
      "name": "BondTradeTransactionV2State",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "NotActive"
          },
          {
            "name": "Active"
          },
          {
            "name": "PerpetualActive"
          },
          {
            "name": "PerpetualRepaid"
          },
          {
            "name": "PerpetualLiquidatedByAuction"
          },
          {
            "name": "PerpetualLiquidatedByClaim"
          },
          {
            "name": "PerpetualManualTerminating"
          },
          {
            "name": "PerpetualPartialRepaid"
          },
          {
            "name": "PerpetualRefinanceRepaid"
          },
          {
            "name": "PerpetualRefinancedActive"
          },
          {
            "name": "Migrated"
          },
          {
            "name": "PerpetualBorrowerListing"
          },
          {
            "name": "PerpetualLenderListing"
          }
        ]
      }
    },
    {
      "name": "BondTradeTransactionV2Type",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "None"
          },
          {
            "name": "Autocompound"
          },
          {
            "name": "ReceiveNftOnLiquidation"
          },
          {
            "name": "AutoreceiveSol"
          },
          {
            "name": "AutoCompoundAndReceiveNft"
          },
          {
            "name": "AutoReceiveAndReceiveNft"
          },
          {
            "name": "AutoReceiveAndReceiveSpl"
          }
        ]
      }
    },
    {
      "name": "RedeemResult",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "None"
          },
          {
            "name": "DirectBorrow"
          },
          {
            "name": "Reborrow"
          },
          {
            "name": "InstantRefinanced"
          },
          {
            "name": "RefinancedByAuction"
          },
          {
            "name": "PartialRepay"
          },
          {
            "name": "DirectRepaid"
          },
          {
            "name": "Claimed"
          },
          {
            "name": "DirectBorrowAndDirectRepaid"
          },
          {
            "name": "DirectBorrowAndReborrowRepaid"
          },
          {
            "name": "DirectBorrowAndInstantRefinancedRepaid"
          },
          {
            "name": "DirectBorrowAndRefinancedByAuctionRepaid"
          },
          {
            "name": "DirectBorrowAndPartialRepaid"
          },
          {
            "name": "DirectBorrowAndClaimed"
          },
          {
            "name": "ReborrowAndDirectRepaid"
          },
          {
            "name": "ReborrowAndReborrowRepaid"
          },
          {
            "name": "ReborrowAndInstantRefinancedRepaid"
          },
          {
            "name": "ReborrowAndRefinancedByAuctionRepaid"
          },
          {
            "name": "ReborrowAndPartialRepaid"
          },
          {
            "name": "ReborrowAndClaimed"
          },
          {
            "name": "InstantRefinancedAndDirectRepaid"
          },
          {
            "name": "InstantRefinancedAndReborrowRepaid"
          },
          {
            "name": "InstantRefinancedAndInstantRefinancedRepaid"
          },
          {
            "name": "InstantRefinancedAndRefinancedByAuctionRepaid"
          },
          {
            "name": "InstantRefinancedAndPartialRepaid"
          },
          {
            "name": "InstantRefinancedAndClaimed"
          },
          {
            "name": "RefinancedByAuctionAndDirectRepaid"
          },
          {
            "name": "RefinancedByAuctionAndReborrowRepaid"
          },
          {
            "name": "RefinancedByAuctionAndInstantRefinancedRepaid"
          },
          {
            "name": "RefinancedByAuctionAndRefinancedByAuctionRepaid"
          },
          {
            "name": "RefinancedByAuctionAndPartialRepaid"
          },
          {
            "name": "RefinancedByAuctionAndClaimed"
          },
          {
            "name": "PartialRepaidAndDirectRepaid"
          },
          {
            "name": "PartialRepaidAndReborrowRepaid"
          },
          {
            "name": "PartialRepaidAndInstantRefinancedRepaid"
          },
          {
            "name": "PartialRepaidAndRefinancedByAuctionRepaid"
          },
          {
            "name": "PartialRepaidAndPartialRepaid"
          },
          {
            "name": "PartialRepaidAndClaimed"
          }
        ]
      }
    },
    {
      "name": "LendingTokenType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "NativeSol"
          },
          {
            "name": "Usdc"
          },
          {
            "name": "BanxSol"
          }
        ]
      }
    },
    {
      "name": "RepayDestination",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "None"
          },
          {
            "name": "Offer"
          },
          {
            "name": "Wallet"
          },
          {
            "name": "Vault"
          }
        ]
      }
    },
    {
      "name": "CallState",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Uninitialized"
          },
          {
            "name": "Initialized"
          }
        ]
      }
    },
    {
      "name": "AdventureState",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Uninitialized"
          },
          {
            "name": "Initialized"
          },
          {
            "name": "DistributingInitialized"
          }
        ]
      }
    },
    {
      "name": "BanxStakeState",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Staked"
          },
          {
            "name": "Unstaked"
          },
          {
            "name": "Liquidated"
          }
        ]
      }
    },
    {
      "name": "PayloadTypeLocal",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Pubkey",
            "fields": [
              "publicKey"
            ]
          },
          {
            "name": "Seeds",
            "fields": [
              {
                "defined": "SeedsVecLocal"
              }
            ]
          },
          {
            "name": "MerkleProof",
            "fields": [
              {
                "defined": "ProofInfoLocal"
              }
            ]
          },
          {
            "name": "Number",
            "fields": [
              "u64"
            ]
          }
        ]
      }
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "MetadataDoesntExist",
      "msg": "MetadataDoesntExist"
    },
    {
      "code": 6001,
      "name": "DerivedKeyInvalid",
      "msg": "DerivedKeyInvalid"
    },
    {
      "code": 6002,
      "name": "InvalidCollectionDetails",
      "msg": "InvalidCollectionDetails"
    },
    {
      "code": 6003,
      "name": "InvalidCollection",
      "msg": "InvalidCollection"
    },
    {
      "code": 6004,
      "name": "InvalidCollectionMint",
      "msg": "InvalidCollectionMint"
    },
    {
      "code": 6005,
      "name": "NftNotVerified",
      "msg": "NftNotVerified"
    },
    {
      "code": 6006,
      "name": "InvalidFee",
      "msg": "InvalidFee"
    },
    {
      "code": 6007,
      "name": "InvalidMint",
      "msg": "InvalidMint"
    },
    {
      "code": 6008,
      "name": "CantMakeZeroOrders",
      "msg": "Can't make 0 orders"
    },
    {
      "code": 6009,
      "name": "UserDoesntHaveAuthority",
      "msg": "UserDoesntHaveAuthority"
    },
    {
      "code": 6010,
      "name": "TokenAccountDoesntContainNft",
      "msg": "TokenAccountDoesntContainNft"
    },
    {
      "code": 6011,
      "name": "MarketAuthorityIncorrect",
      "msg": "MarketAuthorityIncorrect"
    },
    {
      "code": 6012,
      "name": "CanPutPairsOnlyToAvailableMarkets",
      "msg": "CanPutPairsOnlyToAvailableMarkets"
    },
    {
      "code": 6013,
      "name": "NotWhitelistedNftForThisMarket",
      "msg": "NotWhitelistedNftForThisMarket"
    },
    {
      "code": 6014,
      "name": "NoBuyOrdersOnThisPair",
      "msg": "NoBuyOrdersOnThisPair"
    },
    {
      "code": 6015,
      "name": "InstructionIsNotSupported",
      "msg": "InstructionIsNotSupported"
    },
    {
      "code": 6016,
      "name": "CanTradeOnlyWithPairsOnMarket",
      "msg": "CanTradeOnlyWithPairsOnMarket"
    },
    {
      "code": 6017,
      "name": "UserDoesntHaveHadomarketAuthority",
      "msg": "UserDoesntHaveHadomarketAuthority"
    },
    {
      "code": 6018,
      "name": "HadomarketAlreadyFinished",
      "msg": "HadomarketAlreadyFinished"
    },
    {
      "code": 6019,
      "name": "CanModifyOnlyToVirtualOrInitializingPairs",
      "msg": "CanModifyOnlyToVirtualOrInitializingPairs"
    },
    {
      "code": 6020,
      "name": "BondAuthorityIssuerDoesntMatch",
      "msg": "BondAuthorityIssuerDoesntMatch"
    },
    {
      "code": 6021,
      "name": "CanRepayOnlyActivatedBond",
      "msg": "CanRepayOnlyActivatedBond"
    },
    {
      "code": 6022,
      "name": "CollateralTokenMintDoesntMatchBox",
      "msg": "CollateralTokenMintDoesntMatchBox"
    },
    {
      "code": 6023,
      "name": "WrongAdmin",
      "msg": "WrongAdmin"
    },
    {
      "code": 6024,
      "name": "LoanToValueFilterOutOfBound",
      "msg": "LoanToValueFilterOutOfBound"
    },
    {
      "code": 6025,
      "name": "FraktMarketDoesntMatchWhitelistEntry",
      "msg": "FraktMarketDoesntMatchWhitelistEntry"
    },
    {
      "code": 6026,
      "name": "NftIsNotMasterEdition",
      "msg": "NftIsNotMasterEdition"
    },
    {
      "code": 6027,
      "name": "NftValidationAdapterIsExpired",
      "msg": "NftValidationAdapterIsExpired"
    },
    {
      "code": 6028,
      "name": "CustomValidationAdapterProgramDoesntMatchUser",
      "msg": "CustomValidationAdapterProgramDoesntMatchUser"
    },
    {
      "code": 6029,
      "name": "OnlyAdminCanInitializeFlashLoanPool",
      "msg": "OnlyAdminCanInitializeFlashLoanPool"
    },
    {
      "code": 6030,
      "name": "CantSetLoanFeePointsGreaterThanBasePoints",
      "msg": "CantSetLoanFeePointsGreaterThanBasePoints"
    },
    {
      "code": 6031,
      "name": "OnlyPoolAuthorityCanDepositAndWithdrawLiquidity",
      "msg": "OnlyPoolAuthorityCanDepositAndWithdrawLiquidity"
    },
    {
      "code": 6032,
      "name": "CantWithdrawMoreThanPoolBalance",
      "msg": "CantWithdrawMoreThanPoolBalance"
    },
    {
      "code": 6033,
      "name": "CantBorrowAndRepayByCpi",
      "msg": "CantBorrowAndRepayByCpi"
    },
    {
      "code": 6034,
      "name": "RepayAmountDoesntCorrespondBorrowAmount",
      "msg": "RepayAmountDoesntCorrespondBorrowAmount"
    },
    {
      "code": 6035,
      "name": "TransactionDoesntContainRepayInstruction",
      "msg": "TransactionDoesntContainRepayInstruction"
    },
    {
      "code": 6036,
      "name": "AlreadyBorrowing",
      "msg": "AlreadyBorrowing"
    },
    {
      "code": 6037,
      "name": "WrongHadeswapProgramId",
      "msg": "WrongHadeswapProgramId"
    },
    {
      "code": 6038,
      "name": "AmountToReturnIsHigherThanMax",
      "msg": "AmountToReturnIsHigherThanMax"
    },
    {
      "code": 6039,
      "name": "AutocompoundNotSupportedYet",
      "msg": "AutocompoundNotSupportedYet"
    },
    {
      "code": 6040,
      "name": "AutocompoundDepositIsNotActive",
      "msg": "AutocompoundDepositIsNotActive"
    },
    {
      "code": 6041,
      "name": "AutocompoundDepositDoesntMatchPair",
      "msg": "AutocompoundDepositDoesntMatchPair"
    },
    {
      "code": 6042,
      "name": "OnlyAdminCanRedeemFbondsFromAutocompoundToPair",
      "msg": "OnlyAdminCanRedeemFbondsFromAutocompoundToPair"
    },
    {
      "code": 6043,
      "name": "InvalidAssetReceiverTokenAccount",
      "msg": "InvalidAssetReceiverTokenAccount"
    },
    {
      "code": 6044,
      "name": "AutoreceiveSolToUserFeatureNotEnabled",
      "msg": "AutoreceiveSolToUserFeatureNotEnabled"
    },
    {
      "code": 6045,
      "name": "AutocompoundFeatureNotEnabled",
      "msg": "AutocompoundFeatureNotEnabled"
    },
    {
      "code": 6046,
      "name": "InvalidAssetReceiver",
      "msg": "InvalidAssetReceiver"
    },
    {
      "code": 6047,
      "name": "BondCollateralOrSolReceiverNotUser",
      "msg": "BondCollateralOrSolReceiverNotUser"
    },
    {
      "code": 6048,
      "name": "OnlyBuyPairsAreSupported",
      "msg": "OnlyBuyPairsAreSupported"
    },
    {
      "code": 6049,
      "name": "CanModifyOnlyTokenForNftPairs",
      "msg": "CanModifyOnlyTokenForNftPairs"
    },
    {
      "code": 6050,
      "name": "OraclePriceIsStale",
      "msg": "OraclePriceIsStale"
    },
    {
      "code": 6051,
      "name": "NftLiquidationTimeNotPassed",
      "msg": "NftLiquidationTimeNotPassed"
    },
    {
      "code": 6052,
      "name": "CanDepositReturnedSolOnlyToLiquidatingBond",
      "msg": "CanDepositReturnedSolOnlyToLiquidatingBond"
    },
    {
      "code": 6053,
      "name": "Debugger",
      "msg": "Debugger"
    },
    {
      "code": 6054,
      "name": "NotSupportedSellCase",
      "msg": "NotSupportedSellCase"
    },
    {
      "code": 6055,
      "name": "CollateralTokenMintDoesntMatchAutocompoundDeposit",
      "msg": "CollateralTokenMintDoesntMatchAutocompoundDeposit"
    },
    {
      "code": 6056,
      "name": "NotCorrectAutocompoundType",
      "msg": "NotCorrectAutocompoundType"
    },
    {
      "code": 6057,
      "name": "BadRuleSet",
      "msg": "BadRuleSet"
    },
    {
      "code": 6058,
      "name": "DelegateBuilderFailed",
      "msg": "DelegateBuilderFailed"
    },
    {
      "code": 6059,
      "name": "LockBuilderFailed",
      "msg": "LockBuilderFailed"
    },
    {
      "code": 6060,
      "name": "CanRedeemFromAutocompoundToUserOnlyIfPairClosed",
      "msg": "CanRedeemFromAutocompoundToUserOnlyIfPairClosed"
    },
    {
      "code": 6061,
      "name": "AmountToClaimCantExceedAmountOfBondsInAutocompoundDeposit",
      "msg": "AmountToClaimCantExceedAmountOfBondsInAutocompoundDeposit"
    },
    {
      "code": 6062,
      "name": "CollateralOwnerDoesntMatchCollateralTokenAccount",
      "msg": "CollateralOwnerDoesntMatchCollateralTokenAccount"
    },
    {
      "code": 6063,
      "name": "CanLiquidateOnlyBondsWithBondCollateralOrSolReceiver",
      "msg": "CanLiquidateOnlyBondsWithBondCollateralOrSolReceiver"
    },
    {
      "code": 6064,
      "name": "MerkleTreeIsNotSupported",
      "msg": "MerkleTreeIsNotSupported"
    },
    {
      "code": 6065,
      "name": "UserDoesntHaveEnoughBalance",
      "msg": "UserDoesntHaveEnoughBalance"
    },
    {
      "code": 6066,
      "name": "CantSellToBuggedNegativeInterestPair",
      "msg": "CantSellToBuggedNegativeInterestPair"
    },
    {
      "code": 6067,
      "name": "ThisCollectionIsDisabled",
      "msg": "ThisCollectionIsDisabled"
    },
    {
      "code": 6068,
      "name": "InvalidMutualBondOfferDepositVault",
      "msg": "InvalidMutualBondOfferDepositVault"
    },
    {
      "code": 6069,
      "name": "OnlyBondOfferDepositsAndFullBondAreSupported",
      "msg": "OnlyBondOfferDepositsAndFullBondAreSupported"
    },
    {
      "code": 6070,
      "name": "MerkleTreeWhitelistIsNotSupported",
      "msg": "MerkleTreeWhitelistIsNotSupported"
    },
    {
      "code": 6071,
      "name": "CantSellZero",
      "msg": "CantSellZero"
    },
    {
      "code": 6072,
      "name": "BondOfferHadoMarketDoesntMatch",
      "msg": "BondOfferHadoMarketDoesntMatch"
    },
    {
      "code": 6073,
      "name": "FundsSolVaultPdaIsIncorrect",
      "msg": "FundsSolVaultPdaIsIncorrect"
    },
    {
      "code": 6074,
      "name": "BondOfferVaultPdaIsIncorrect",
      "msg": "BondOfferVaultPdaIsIncorrect"
    },
    {
      "code": 6075,
      "name": "BondTradeTransactionV3PdaIsIncorrect",
      "msg": "BondTradeTransactionV3PdaIsIncorrect"
    },
    {
      "code": 6076,
      "name": "BondBalancesBeforeAndAfterInstructionDontMatch",
      "msg": "BondBalancesBeforeAndAfterInstructionDontMatch"
    },
    {
      "code": 6077,
      "name": "NotAuthorizedToRemoveBondOffer",
      "msg": "NotAuthorizedToRemoveBondOffer"
    },
    {
      "code": 6078,
      "name": "CantUpdateRemovedBondOffer",
      "msg": "CantUpdateRemovedBondOffer"
    },
    {
      "code": 6079,
      "name": "BondTradeTransactionNotActive",
      "msg": "BondTradeTransactionNotActive"
    },
    {
      "code": 6080,
      "name": "BondOfferDoesntMatchTradeTransaction",
      "msg": "BondOfferDoesntMatchTradeTransaction"
    },
    {
      "code": 6081,
      "name": "ReceiveNftIsNotOption",
      "msg": "ReceiveNftIsNotOption"
    },
    {
      "code": 6082,
      "name": "CanLiquidateOnlyActiveBond",
      "msg": "CanLiquidateOnlyActiveBond"
    },
    {
      "code": 6083,
      "name": "CollateralBoxDoesntMatchFbond",
      "msg": "CollateralBoxDoesntMatchFbond"
    },
    {
      "code": 6084,
      "name": "AutocompoundPairShouldBeOnMarketVirtual",
      "msg": "AutocompoundPairShouldBeOnMarketVirtual"
    },
    {
      "code": 6085,
      "name": "UserDoesntOwnHisBondTradeTransaction",
      "msg": "UserDoesntOwnHisBondTradeTransaction"
    },
    {
      "code": 6086,
      "name": "UsersBondTradeTransactionHasIncorrectFbondTokenMint",
      "msg": "UsersBondTradeTransactionHasIncorrectFbondTokenMint"
    },
    {
      "code": 6087,
      "name": "UsersBondTradeTransactionIsInactive",
      "msg": "UsersBondTradeTransactionIsInactive"
    },
    {
      "code": 6088,
      "name": "SumOfBondsInExitingTradeTransactionsDoesntMatchTotalAmountToSell",
      "msg": "SumOfBondsInExitingTradeTransactionsDoesntMatchTotalAmountToSell"
    },
    {
      "code": 6089,
      "name": "CantSellNotFullBondsSupplyOnRefinance",
      "msg": "CantSellNotFullBondsSupplyOnRefinance"
    },
    {
      "code": 6090,
      "name": "OnlyAdminCanMigrate",
      "msg": "OnlyAdminCanMigrate"
    },
    {
      "code": 6091,
      "name": "BondFeaturesNoneAndReceiveNftOnLiquidationAreNotSupported",
      "msg": "BondFeaturesNoneAndReceiveNftOnLiquidationAreNotSupported"
    },
    {
      "code": 6092,
      "name": "SomethingWrongWithMigrationBondOfferIsMissing",
      "msg": "SomethingWrongWithMigrationBondOfferIsMissing"
    },
    {
      "code": 6093,
      "name": "SecondAddressIsNotUserOrBondOffer",
      "msg": "SecondAddressIsNotUserOrBondOffer"
    },
    {
      "code": 6094,
      "name": "SumOfBondsInRepayDoesntMatchBondsSupply",
      "msg": "SumOfBondsInRepayDoesntMatchBondsSupply"
    },
    {
      "code": 6095,
      "name": "CantBuyoutForLowerThanMinimumPrice",
      "msg": "CantBuyoutForLowerThanMinimumPrice"
    },
    {
      "code": 6096,
      "name": "CantBuyoutNftOnDutchAuctionWhenThereAreOnlyOneLender",
      "msg": "CantBuyoutNftOnDutchAuctionWhenThereAreOnlyOneLender"
    },
    {
      "code": 6097,
      "name": "ThereAreMoreThanOneLenderOfThisBond",
      "msg": "ThereAreMoreThanOneLenderOfThisBond"
    },
    {
      "code": 6098,
      "name": "TradeTransactionDoesntMatchBond",
      "msg": "TradeTransactionDoesntMatchBond"
    },
    {
      "code": 6099,
      "name": "CantLiquidatePerpetualBonds",
      "msg": "CantLiquidatePerpetualBonds"
    },
    {
      "code": 6100,
      "name": "CantRepayExpiredReceivingCollateralLoan",
      "msg": "CantRepayExpiredReceivingCollateralLoan"
    },
    {
      "code": 6101,
      "name": "DisabledPairsWithMoreThanOneOrder",
      "msg": "DisabledPairsWithMoreThanOneOrder"
    },
    {
      "code": 6102,
      "name": "CollectionIsDisabled",
      "msg": "CollectionIsDisabled"
    },
    {
      "code": 6103,
      "name": "ShouldBeEscrow",
      "msg": "ShouldBeEscrow"
    },
    {
      "code": 6104,
      "name": "EscrowLoansNotSupported",
      "msg": "EscrowLoansNotSupported"
    },
    {
      "code": 6105,
      "name": "OnlyBanxIsSupportedForStaking",
      "msg": "OnlyBanxIsSupportedForStaking"
    },
    {
      "code": 6106,
      "name": "UserDoesntOwnStake",
      "msg": "UserDoesntOwnStake"
    },
    {
      "code": 6107,
      "name": "BanxIsNotStaked",
      "msg": "BanxIsNotStaked"
    },
    {
      "code": 6108,
      "name": "CantUnstakeLoanedBanx",
      "msg": "CantUnstakeLoanedBanx"
    },
    {
      "code": 6109,
      "name": "WrongCollateralTokenAccount",
      "msg": "WrongCollateralTokenAccount"
    },
    {
      "code": 6110,
      "name": "WrongNftMint",
      "msg": "WrongNftMint"
    },
    {
      "code": 6111,
      "name": "CantUnstakeWithActiveSubscriptions",
      "msg": "CantUnstakeWithActiveSubscriptions"
    },
    {
      "code": 6112,
      "name": "AdventureDoesntLayOnCurve",
      "msg": "AdventureDoesntLayOnCurve"
    },
    {
      "code": 6113,
      "name": "CantSubscribeToPassedWeek",
      "msg": "CantSubscribeToPassedWeek"
    },
    {
      "code": 6114,
      "name": "CantHaveMoreThanThreeSubscriptions",
      "msg": "CantHaveMoreThanThreeSubscriptions"
    },
    {
      "code": 6115,
      "name": "CantSubscribeMoreThanThreeWeeksAhead",
      "msg": "CantSubscribeMoreThanThreeWeeksAhead"
    },
    {
      "code": 6116,
      "name": "CantUnsubscribeFromPassedAdventureNeedToHarvest",
      "msg": "CantUnsubscribeFromPassedAdventureNeedToHarvest"
    },
    {
      "code": 6117,
      "name": "AlreadyUnsubscribedOrHarvested",
      "msg": "AlreadyUnsubscribedOrHarvested"
    },
    {
      "code": 6118,
      "name": "CantHarvestNotEndedAdventures",
      "msg": "CantHarvestNotEndedAdventures"
    },
    {
      "code": 6119,
      "name": "SubscriptionDoesntMatchAdventure",
      "msg": "SubscriptionDoesntMatchAdventure"
    },
    {
      "code": 6120,
      "name": "RefinanceAuctionNotStartedYet",
      "msg": "RefinanceAuctionNotStartedYet"
    },
    {
      "code": 6121,
      "name": "AdventureSubscriptionPdaIsIncorrect",
      "msg": "AdventureSubscriptionPdaIsIncorrect"
    },
    {
      "code": 6122,
      "name": "BanxIsAlreadyLoaned",
      "msg": "BanxIsAlreadyLoaned"
    },
    {
      "code": 6123,
      "name": "CantStandartRepayStakedBanx",
      "msg": "CantStandartRepayStakedBanx"
    },
    {
      "code": 6124,
      "name": "StakeDoesntBelongToBond",
      "msg": "StakeDoesntBelongToBond"
    },
    {
      "code": 6125,
      "name": "FirstAdventureNotFound",
      "msg": "FirstAdventureNotFound"
    },
    {
      "code": 6126,
      "name": "BanxUserIsntFbondIssuer",
      "msg": "BanxUserIsntFbondIssuer"
    },
    {
      "code": 6127,
      "name": "ConstantBidCapExceeded",
      "msg": "ConstantBidCapExceeded"
    },
    {
      "code": 6128,
      "name": "TotalLoanValueIsMoreThanMaxOfferValue",
      "msg": "TotalLoanValueIsMoreThanMaxOfferValue"
    },
    {
      "code": 6129,
      "name": "NeedToRepayAllTradeTransactions",
      "msg": "NeedToRepayAllTradeTransactions"
    },
    {
      "code": 6130,
      "name": "SubscriptionDoesntBelongToStake",
      "msg": "SubscriptionDoesntBelongToStake"
    },
    {
      "code": 6131,
      "name": "OnlyMerkleTreeWhitelistTypeAllowedForCnft",
      "msg": "OnlyMerkleTreeWhitelistTypeAllowedForCnft"
    },
    {
      "code": 6132,
      "name": "BanxIsNotCnft",
      "msg": "BanxIsNotCnft"
    },
    {
      "code": 6133,
      "name": "OnlyPerpetualMarketsAreSupported",
      "msg": "OnlyPerpetualMarketsAreSupported"
    },
    {
      "code": 6134,
      "name": "UserDoesntOwnHadomarket",
      "msg": "UserDoesntOwnHadomarket"
    },
    {
      "code": 6135,
      "name": "TokenAccountDoentMatchUserOrToken",
      "msg": "TokenAccountDoentMatchUserOrToken"
    },
    {
      "code": 6136,
      "name": "FraktBondPdaIsIncorrect",
      "msg": "FraktBondPdaIsIncorrect"
    },
    {
      "code": 6137,
      "name": "FinishAllGood",
      "msg": "FinishAllGood"
    },
    {
      "code": 6138,
      "name": "UserDoesntOwnLiquidatedBond",
      "msg": "UserDoesntOwnLiquidatedBond"
    },
    {
      "code": 6139,
      "name": "BondTradeTransactionIsNotTerminating",
      "msg": "BondTradeTransactionIsNotTerminating"
    },
    {
      "code": 6140,
      "name": "LoanIsNotLiquidatedYet",
      "msg": "LoanIsNotLiquidatedYet"
    },
    {
      "code": 6141,
      "name": "TokenMintDoesntBelongBond",
      "msg": "TokenMintDoesntBelongBond"
    },
    {
      "code": 6142,
      "name": "LoanIsAlreadyTerminated",
      "msg": "LoanIsAlreadyTerminated"
    },
    {
      "code": 6143,
      "name": "LenderDoesntMatchTradeTxn",
      "msg": "LenderDoesntMatchTradeTxn"
    },
    {
      "code": 6144,
      "name": "CanRefinanceOnlyActiveLoan",
      "msg": "CanRefinanceOnlyActiveLoan"
    },
    {
      "code": 6145,
      "name": "HadoMarketDoesntMatchBond",
      "msg": "HadoMarketDoesntMatchBond"
    },
    {
      "code": 6146,
      "name": "BondOfferDoesntMatchHadoMarket",
      "msg": "BondOfferDoesntMatchHadoMarket"
    },
    {
      "code": 6147,
      "name": "LoanIsNotActive",
      "msg": "LoanIsNotActive"
    },
    {
      "code": 6148,
      "name": "CantBorrowZero",
      "msg": "CantBorrowZero"
    },
    {
      "code": 6149,
      "name": "LoanIsAlreadyLiquidated",
      "msg": "LoanIsAlreadyLiquidated"
    },
    {
      "code": 6150,
      "name": "RepayFractionIsIncorrect",
      "msg": "Can't repay partial 0 or 100%+"
    },
    {
      "code": 6151,
      "name": "WrongStakedBanxHadoMarket",
      "msg": "WrongStakedBanxHadoMarket"
    },
    {
      "code": 6152,
      "name": "StakedBanxHadoMarket",
      "msg": "StakedBanxHadoMarket"
    },
    {
      "code": 6153,
      "name": "Not63PointsBanx",
      "msg": "Not63PointsBanx"
    },
    {
      "code": 6154,
      "name": "BanxStakeDoesntMatchBond",
      "msg": "BanxStakeDoesntMatchBond"
    },
    {
      "code": 6155,
      "name": "BondOfferShouldBeBondingCurve",
      "msg": "BondOfferShouldBeBondingCurve"
    },
    {
      "code": 6156,
      "name": "BondOfferShouldBePerpetualOffer",
      "msg": "BondOfferShouldBePerpetualOffer"
    },
    {
      "code": 6157,
      "name": "ProtocolFeeReceiverIsIncorrect",
      "msg": "ProtocolFeeReceiverIsIncorrect"
    },
    {
      "code": 6158,
      "name": "RoundIsNotOpen",
      "msg": "RoundIsNotOpen"
    },
    {
      "code": 6159,
      "name": "RoundIsOpen",
      "msg": "RoundIsOpen"
    },
    {
      "code": 6160,
      "name": "LessThenMinDeposit",
      "msg": "LessThenMinDeposit"
    },
    {
      "code": 6161,
      "name": "LastRoundIsOpen",
      "msg": "LastRoundIsOpen"
    },
    {
      "code": 6162,
      "name": "RoundPdaIsIncorrect",
      "msg": "RoundPdaIsIncorrect"
    },
    {
      "code": 6163,
      "name": "WrongRoundNumber",
      "msg": "WrongRoundNumber"
    },
    {
      "code": 6164,
      "name": "UserIsNotWinner",
      "msg": "UserIsNotWinner"
    },
    {
      "code": 6165,
      "name": "RewardsAlreadyClaimed",
      "msg": "RewardsAlreadyClaimed"
    },
    {
      "code": 6166,
      "name": "AddressMismatch",
      "msg": "Address Mismatch"
    },
    {
      "code": 6167,
      "name": "ProgramMismatch",
      "msg": "Program Mismatch"
    },
    {
      "code": 6168,
      "name": "MissingRepay",
      "msg": "Missing Repay"
    },
    {
      "code": 6169,
      "name": "IncorrectOwner",
      "msg": "Incorrect Owner"
    },
    {
      "code": 6170,
      "name": "IncorrectProgramAuthority",
      "msg": "Incorrect Program Authority"
    },
    {
      "code": 6171,
      "name": "CannotBorrowBeforeRepay",
      "msg": "Cannot Borrow Before Repay"
    },
    {
      "code": 6172,
      "name": "UnknownInstruction",
      "msg": "Unknown Instruction"
    },
    {
      "code": 6173,
      "name": "ToNewBondOffer",
      "msg": "ToNewBondOffer"
    },
    {
      "code": 6174,
      "name": "JackpotAlreadyClaimed",
      "msg": "JackpotAlreadyClaimed"
    },
    {
      "code": 6175,
      "name": "UserDoNotHaveJackpot",
      "msg": "UserDoNotHaveJackpot"
    },
    {
      "code": 6176,
      "name": "RakebackAlreadyClaimed",
      "msg": "RakebackAlreadyClaimed"
    },
    {
      "code": 6177,
      "name": "RakebackLocked",
      "msg": "RakebackLocked"
    },
    {
      "code": 6178,
      "name": "LastOrderIsLowerThanZero",
      "msg": "LastOrderIsLowerThanZero"
    },
    {
      "code": 6179,
      "name": "OnlyLinearCurveIsSupported",
      "msg": "OnlyLinearCurveIsSupported"
    },
    {
      "code": 6180,
      "name": "CantRefinanceFromSameOffer",
      "msg": "CantRefinanceFromSameOffer"
    },
    {
      "code": 6181,
      "name": "CantRefinanceFromNotSameTypeOffers",
      "msg": "CantRefinanceFromNotSameTypeOffers"
    },
    {
      "code": 6182,
      "name": "ReservesCantBecomeNegative",
      "msg": "Reserves are negative somehow, it's error"
    },
    {
      "code": 6183,
      "name": "FacelessShouldBeMigratedInSpecialWay",
      "msg": "FacelessShouldBeMigratedInSpecialWay"
    },
    {
      "code": 6184,
      "name": "OfferDoesntBelongToTradeTransaction",
      "msg": "OfferDoesntBelongToTradeTransaction"
    },
    {
      "code": 6185,
      "name": "IncorrectAdditionalParticipant",
      "msg": "IncorrectAdditionalParticipant"
    },
    {
      "code": 6186,
      "name": "BanxIsNotLocked",
      "msg": "BanxIsNotLocked"
    },
    {
      "code": 6187,
      "name": "InstructionIsDisabled",
      "msg": "InstructionIsDisabled"
    },
    {
      "code": 6188,
      "name": "WrongCreator",
      "msg": "WrongCreator"
    },
    {
      "code": 6189,
      "name": "ThisUserCantRepay",
      "msg": "ThisUserCantRepay"
    },
    {
      "code": 6190,
      "name": "AprIsOutOfBound",
      "msg": "AprIsOutOfBound"
    },
    {
      "code": 6191,
      "name": "CanNotCallMoreThanBorrowedAmount",
      "msg": "CanNotCallMoreThanBorrowedAmount"
    },
    {
      "code": 6192,
      "name": "IncorrectRedeemResult",
      "msg": "IncorrectRedeemResult"
    },
    {
      "code": 6193,
      "name": "AlreadyMigrated",
      "msg": "AlreadyMigrated"
    },
    {
      "code": 6194,
      "name": "WrongFbond",
      "msg": "WrongFbond"
    },
    {
      "code": 6195,
      "name": "NothingToSubscribe",
      "msg": "NothingToSubscribe"
    },
    {
      "code": 6196,
      "name": "BanxAdventurePdaIsIncorrect",
      "msg": "BanxAdventurePdaIsIncorrect"
    },
    {
      "code": 6197,
      "name": "BanxTokensInTwoWeeksLock",
      "msg": "Banx tokens in two weeks lock"
    },
    {
      "code": 6198,
      "name": "BanxAdventureInProgress",
      "msg": "Can't claim before end adventure"
    },
    {
      "code": 6199,
      "name": "MaxTokensStaked",
      "msg": "Max amount of tokens staked"
    },
    {
      "code": 6200,
      "name": "WrongVaultTokenAccount",
      "msg": "Wrong vault token account"
    },
    {
      "code": 6201,
      "name": "WrongBondOfferBondingType",
      "msg": "Wrong bond offer bonding type"
    },
    {
      "code": 6202,
      "name": "InvalidLendingTokenMint",
      "msg": "InvalidLendingTokenMint"
    },
    {
      "code": 6203,
      "name": "NotBorrowerListing",
      "msg": "Not borrower listing"
    },
    {
      "code": 6204,
      "name": "TerminationFreezePeriod",
      "msg": "TerminationFreezePeriod"
    },
    {
      "code": 6205,
      "name": "NotSplToken",
      "msg": "NotSplToken"
    },
    {
      "code": 6206,
      "name": "NotWhitelistedSplForThisMarket",
      "msg": "NotWhitelistedSplForThisMarket"
    }
  ]
}